@model MovieDb.ViewModels.MovieViewModel

@{
    ViewBag.Title = "Create or Edit a movie";
}

<h2>Create or Edit a movie</h2>
@Scripts.Render("~/bundles/movieDbMovie")
@Html.Hidden("DisplayMovieUrl", Url.Action("DisplayMovie", "Home"))
@Html.Hidden("CreateEditActorPath", Url.Action("CreateEditActor", "Actor"))
@Html.Hidden("CreateEditProducerPath", Url.Action("CreateEditProducer", "Producer"))

@using (Ajax.BeginForm("CreateEditMovie", "Home", FormMethod.Post, new AjaxOptions
{
    OnBegin = "return validateForm('#createEditMovie')",
    InsertionMode = InsertionMode.Replace,
    //OnFailure = "handleAjaxError"
    OnSuccess="onMovieSave"
}, new { id = "createEditMovie" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.HiddenFor(model => model.MovieId)
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.MovieTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.MovieTitle, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.MovieTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Plot, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.TextAreaFor(model => model.Plot, new { htmlAttributes = new { @class = "form-control" } })
                <br />
                @Html.ValidationMessageFor(model => model.Plot, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReleaseYear, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @(Html.Kendo().DropDownListFor(model => model.ReleaseYear)
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .OptionLabel("Select one")
                    .BindTo(MovieDb.Helpers.CustomDataHelper.ItemListForYear())
                    .HtmlAttributes(new { @class = "form-control" })
                )
                <br />
                @Html.ValidationMessageFor(model => model.ReleaseYear, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
                @Html.LabelFor(model => model.Poster, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-7">
                    @Html.HiddenFor(model => model.PosterPath)

                    @(Html.Kendo().Upload()
                    .Name("posterImage")
                    .Async(a => a
                    .Save("SaveImage", "Home")
                    .Remove("RemoveImage", "Home")
                    .SaveField("files")
                    ).Multiple(false)
                    .Events(e => e
                .Select("onPosterUploadSelect")
                .Upload("onPosterUploadBegin")                
                //.Remove("onPosterUploadRemove")
                //.Success("onPosterUploadSuccess")
                )
                    .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".png" }))
                    )
                </div>

            </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActorIds, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @(Html.Kendo().MultiSelectFor(x => x.ActorIds)
                .DataTextField("Name")
                .DataValueField("RowId")
                .Placeholder("Select actors...")
                .AutoBind(true)
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetActors", "Actor");
                    })
                    .ServerFiltering(true);
                })
        .NoDataTemplate(
        "<div>" +
            "No data found. Do you want to add new actor - '#: instance.input.val() #' ?" +
        "</div> <br />" +
        "<button id='addNewActor' class='btn' onclick='addNewActor(\"#: instance.element[0].id #\")' type='button'> Add a new actor</button>")
                )
                <br />
                @Html.ValidationMessageFor(model => model.ActorIds, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ProducerIds, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @(Html.Kendo().MultiSelectFor(model => model.ProducerIds)
                .DataTextField("Name")
                .DataValueField("RowId")
                .Placeholder("Select a producer...")
                .AutoBind(true)
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetProducers", "Producer");
                    })
                    .ServerFiltering(true);
                }).MaxSelectedItems(1)
        .NoDataTemplate(
        "<div>" +
            "No data found. Do you want to add new producer - '#: instance.input.val() #' ?" +
        "</div> <br />" +
        "<button id='addNewProducer' class='btn' onclick='addNewProducer(\"#: instance.element[0].id #\")' type='button'> Add a new producer</button>")
                )
                <br />
                @Html.ValidationMessageFor(model => model.ProducerIds, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-7">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
